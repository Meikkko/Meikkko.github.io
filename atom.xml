<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Meiko</title>
  
  <subtitle>处处见景深</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-23T08:40:22.182Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Meiko</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>codingNow 5 用两个栈实现队列</title>
    <link href="http://yoursite.com/2019/08/23/codingNow-5-%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2019/08/23/codingNow-5-用两个栈实现队列/</id>
    <published>2019-08-23T08:30:09.000Z</published>
    <updated>2019-08-23T08:40:22.182Z</updated>
    
    <content type="html"><![CDATA[<p>题目描述<br>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; stack2 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        stack1.push(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stack1.isEmpty() &amp;&amp; stack2.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"null!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stack2.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack1.isEmpty()) &#123;</span><br><span class="line">                stack2.push(stack1.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人总结<br>基本思路：<br>1.push：直接push进stack1。<br>2.pop： 首先检查是否均为空，是则报空指针。剩余两种情况，一是stack2为空，也就是说stack2里面的所有栈都被清除出去或者是尚未放入元素，则将stack1中的元素依次pop后压入stack2，再实现pop功能。二是stack中不为空，直接返回stack2.pop()。<br>3.其中peek和pop区别在于pop会返回栈顶元素并且弹出元素。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目描述&lt;br&gt;在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。&lt;/p&gt;
&lt;figure class=&quot;highlight jav
      
    
    </summary>
    
    
      <category term="coding-interviews" scheme="http://yoursite.com/tags/coding-interviews/"/>
    
  </entry>
  
  <entry>
    <title>codingNow 4 还原二叉树</title>
    <link href="http://yoursite.com/2019/08/23/codingNow-4-%E8%BF%98%E5%8E%9F%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2019/08/23/codingNow-4-还原二叉树/</id>
    <published>2019-08-23T07:26:09.000Z</published>
    <updated>2019-08-23T08:32:53.803Z</updated>
    
    <content type="html"><![CDATA[<p>题目描述<br>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for binary tree</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> TreeNode <span class="title">reConstructBinaryTree</span><span class="params">(<span class="keyword">int</span> [] pre,<span class="keyword">int</span> [] in)</span> </span>&#123;</span><br><span class="line">            TreeNode root = reConstructBinaryTree(pre, <span class="number">0</span>, pre.length - <span class="number">1</span>, in, <span class="number">0</span>, in.length - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> TreeNode <span class="title">reConstructBinaryTree</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span> startPre, <span class="keyword">int</span> endPre, <span class="keyword">int</span>[] in, <span class="keyword">int</span> startIn, <span class="keyword">int</span> endIn)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (startPre &gt; endPre || startIn &gt; endIn) &#123;</span><br><span class="line">                <span class="keyword">return</span> null;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            TreeNode node = <span class="keyword">new</span> TreeNode(pre[startPre]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=startIn;i&lt;=endIn;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(in[i]==pre[startPre])&#123;</span><br><span class="line">                    node.left = reConstructBinaryTree(pre, startPre + <span class="number">1</span>, i - startIn + startPre, in, startIn, i - <span class="number">1</span>);</span><br><span class="line">                    node.right = reConstructBinaryTree(pre, i - startIn + startPre + <span class="number">1</span>, endPre, in, i + <span class="number">1</span>, endIn);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>个人总结，几个注意点<br>1.关于二叉树，只有前+中，后+中，层+中才能还原二叉树，其他均不能确定其左右孩子。<br>2.for(int i=startIn;i&lt;=endIn;i++)此处注意&lt;=。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目描述&lt;br&gt;输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。&lt;/p&gt;
&lt;figur
      
    
    </summary>
    
    
      <category term="coding-interviews" scheme="http://yoursite.com/tags/coding-interviews/"/>
    
  </entry>
  
  <entry>
    <title>关于二叉树</title>
    <link href="http://yoursite.com/2019/08/23/%E5%85%B3%E4%BA%8E%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2019/08/23/关于二叉树/</id>
    <published>2019-08-23T07:12:15.000Z</published>
    <updated>2019-08-23T07:25:31.805Z</updated>
    
    <content type="html"><![CDATA[<p>#二叉树的前序、中序、后序、层序遍历和还原。  #<br>前序ABC，中序BAC，后序BCA。</p><p>一、描绘二叉树</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">public</span> Node leftChild;</span><br><span class="line">    <span class="keyword">public</span> Node rightChild;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>二、二叉树的遍历<br>前序遍历：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前序遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">readPre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    result.append(name); <span class="comment">//前序遍历</span></span><br><span class="line">    <span class="keyword">if</span> (leftChild != null) &#123;</span><br><span class="line">        result.append(leftChild.readPre());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rightChild != null) &#123;</span><br><span class="line">        result.append(rightChild.readPre());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中序遍历：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中序遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">readMid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">if</span> (leftChild != null) &#123;</span><br><span class="line">        result.append(leftChild.readMid());</span><br><span class="line">    &#125;</span><br><span class="line">    result.append(name); <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="keyword">if</span> (rightChild != null) &#123;</span><br><span class="line">        result.append(rightChild.readMid());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后序遍历：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后序遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">readEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">if</span> (leftChild != null) &#123;</span><br><span class="line">        result.append(leftChild.readEnd());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rightChild != null) &#123;</span><br><span class="line">        result.append(rightChild.readEnd());</span><br><span class="line">    &#125;</span><br><span class="line">    result.append(name); <span class="comment">//后序遍历</span></span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看到，前序、中序、后序遍历的算法基本上差不多，其主要是在对根节点的访问顺序不同，然后利用递归的方式来进行实现。</p><p>层序遍历：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 层序遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">readLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Queue&lt;Node&gt; <span class="built_in">queue</span> = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="built_in">queue</span>.offer(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">queue</span>.isEmpty()) &#123;</span><br><span class="line">            Node curNode = <span class="built_in">queue</span>.poll();</span><br><span class="line">            result.append(curNode.name);</span><br><span class="line">            <span class="keyword">if</span> (curNode.leftChild != null) &#123;</span><br><span class="line">                <span class="built_in">queue</span>.offer(curNode.leftChild);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (curNode.rightChild != null) &#123;</span><br><span class="line">                <span class="built_in">queue</span>.offer(curNode.rightChild);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>跟其他遍历不同，层序遍历需要借助队列来进行实现。首先将根节点放到队列中，然后遍历循环，依次将左孩子和右孩子放置到队列中。</p><p>三、还原二叉树<br>在第二章节中，获得到前序、中序、后序、层序的结果依次如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>         String pre = <span class="string">"ABDGHCEIF"</span>; <span class="comment">//前序遍历</span></span><br><span class="line"><span class="number">2</span>         String mid = <span class="string">"GDHBAEICF"</span>; <span class="comment">//中序遍历</span></span><br><span class="line"><span class="number">3</span>         String end = <span class="string">"GHDBIEFCA"</span>; <span class="comment">//后序遍历</span></span><br><span class="line"><span class="number">4</span>         String level = <span class="string">"ABCDEFGHI"</span>; <span class="comment">//层序遍历</span></span><br></pre></td></tr></table></figure><p>那能否通过上面的字符串还原出二叉树的的形状呢？这个分情况讨论</p><p>前序+中序：</p><p>思路：通过前序获得根节点的位置，利用根节点将中序序列分为左子树和右子树，然后不断的递归划分即可。</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据前序和中序排序表获取树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">buildTreeByPreMid</span><span class="params">(<span class="keyword">char</span>[] pre, <span class="keyword">int</span> preBegin, <span class="keyword">int</span> preEnd, <span class="keyword">char</span>[] mid, <span class="keyword">int</span> midBegin, <span class="keyword">int</span> midEnd)</span> </span>&#123;</span><br><span class="line">        Node root = <span class="keyword">new</span> Node();</span><br><span class="line">        root.setName(pre[preBegin] + <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> midRootLoc = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = midBegin; i &lt;= midEnd; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mid[i] == pre[preBegin]) &#123;</span><br><span class="line">                midRootLoc = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//递归得到左子树</span></span><br><span class="line">        <span class="keyword">if</span> (preBegin + (midRootLoc - midBegin) &gt;= preBegin + <span class="number">1</span> &amp;&amp; (midRootLoc - <span class="number">1</span>) &gt;= midBegin) &#123;</span><br><span class="line">            Node leftChild = buildTreeByPreMid(pre, preBegin + <span class="number">1</span>, preBegin + (midRootLoc - midBegin),</span><br><span class="line">                    mid, midBegin, midRootLoc - <span class="number">1</span>);</span><br><span class="line">            root.leftChild = leftChild;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//递归得到右子树</span></span><br><span class="line">        <span class="keyword">if</span> (preEnd &gt;= (preEnd - (midEnd - midRootLoc) + <span class="number">1</span>) &amp;&amp; (midEnd &gt;= midRootLoc + <span class="number">1</span>)) &#123;</span><br><span class="line">            Node rightChild = buildTreeByPreMid(pre, preEnd - (midEnd - midRootLoc) + <span class="number">1</span>, preEnd,</span><br><span class="line">                    mid, midRootLoc + <span class="number">1</span>, midEnd);</span><br><span class="line">            root.rightChild = rightChild;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>后序+中序：<br>思路：通过后序获取根节点的位置，然后在中序中划分左子树和右子树，然后递归划分即可。</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据后序和中序遍历还原树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">buildTreeByMidEnd</span><span class="params">(<span class="keyword">char</span>[] mid, <span class="keyword">int</span> midBegin, <span class="keyword">int</span> midEnd, <span class="keyword">char</span>[] end, <span class="keyword">int</span> endBegin, <span class="keyword">int</span> endEnd)</span> </span>&#123;</span><br><span class="line">        Node root = <span class="keyword">new</span> Node();</span><br><span class="line">        root.setName(end[endEnd] + <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">int</span> midRootLoc = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = midEnd; i &gt;= midBegin; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mid[i] == end[endEnd]) &#123;</span><br><span class="line">                midRootLoc = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//还原左子树</span></span><br><span class="line">        <span class="keyword">if</span> (midRootLoc - <span class="number">1</span> &gt;= midBegin &amp;&amp; (endBegin + (midRootLoc - midBegin) - <span class="number">1</span> &gt;= endBegin)) &#123;</span><br><span class="line">            Node leftChild = buildTreeByMidEnd(mid, midBegin, midRootLoc - <span class="number">1</span>, end, endBegin, endBegin + (midRootLoc - midBegin) - <span class="number">1</span>);</span><br><span class="line">            root.leftChild = leftChild;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//还原右子树</span></span><br><span class="line">        <span class="keyword">if</span> (midEnd &gt;= midRootLoc + <span class="number">1</span> &amp;&amp; (endEnd - <span class="number">1</span> &gt;= endEnd - (midEnd - midRootLoc))) &#123;</span><br><span class="line">            Node rightChild = buildTreeByMidEnd(mid, midRootLoc + <span class="number">1</span>, midEnd, end, endEnd - (midEnd - midRootLoc), endEnd - <span class="number">1</span>);</span><br><span class="line">            root.rightChild = rightChild;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>层序+中序：</p><p>思路：根据层序遍历获取根节点的位置，然后将中序划分为左子树和右子树，然后根据划分出的左子树和右子树分别在层序遍历中获取其对应的层序顺序，然后递归调用划分即可。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据层序遍历和中序遍历得到结果</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">buildTreeByMidLevel</span><span class="params">(<span class="keyword">char</span>[] mid, <span class="keyword">char</span>[] level, <span class="keyword">int</span> midBegin, <span class="keyword">int</span> midEnd)</span> </span>&#123;</span><br><span class="line">        Node root = <span class="keyword">new</span> Node(level[<span class="number">0</span>] + <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> midLoc = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = midBegin; i &lt;= midEnd; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mid[i] == level[<span class="number">0</span>]) &#123;</span><br><span class="line">                midLoc = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (level.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isLeft(mid, level[<span class="number">0</span>], level[<span class="number">1</span>])) &#123;</span><br><span class="line">                Node left = buildTreeByMidLevel(mid, getLevelStr(mid, midBegin, midLoc - <span class="number">1</span>, level), midBegin, midLoc - <span class="number">1</span>);</span><br><span class="line">                root.leftChild = left;</span><br><span class="line">                <span class="keyword">if</span> (level.length &gt;= <span class="number">3</span> &amp;&amp; !isLeft(mid, level[<span class="number">0</span>], level[<span class="number">2</span>])) &#123;</span><br><span class="line">                    Node right = buildTreeByMidLevel(mid, getLevelStr(mid, midLoc + <span class="number">1</span>, midEnd, level), midLoc + <span class="number">1</span>, midEnd);</span><br><span class="line">                    root.rightChild = right;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Node right = buildTreeByMidLevel(mid, getLevelStr(mid, midLoc + <span class="number">1</span>, midEnd, level), midLoc + <span class="number">1</span>, midEnd);</span><br><span class="line">                root.rightChild = right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将中序序列中midBegin与MidEnd的字符依次从level中提取出来，保持level中的字符顺序不变</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">char</span>[] getLevelStr(<span class="keyword">char</span>[] mid, <span class="keyword">int</span> midBegin, <span class="keyword">int</span> midEnd, <span class="keyword">char</span>[] level) &#123;</span><br><span class="line">        <span class="keyword">char</span>[] result = <span class="keyword">new</span> <span class="keyword">char</span>[midEnd - midBegin + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> curLoc = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; level.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (contains(mid, level[i], midBegin, midEnd)) &#123;</span><br><span class="line">                result[curLoc++] = level[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果str字符串的begin和end位置之间（包括begin和end）含有字符target,则返回true。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> boolean <span class="title">contains</span><span class="params">(<span class="keyword">char</span>[] str, <span class="keyword">char</span> target, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = begin; i &lt;= end; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其他的遍历组合均不能还原出二叉树的形状，因为无法确认其左右孩子。例如，前序为AB，后序为AB，则无法确认出，B节点是A节点的左孩子还是右孩子，因此无法还原。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#二叉树的前序、中序、后序、层序遍历和还原。  #&lt;br&gt;前序ABC，中序BAC，后序BCA。&lt;/p&gt;
&lt;p&gt;一、描绘二叉树&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
      <category term="浅析java" scheme="http://yoursite.com/tags/%E6%B5%85%E6%9E%90java/"/>
    
  </entry>
  
  <entry>
    <title>codingNow 3 从头到尾打印空格</title>
    <link href="http://yoursite.com/2019/08/22/codingNow-3-%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE%E6%89%93%E5%8D%B0%E7%A9%BA%E6%A0%BC/"/>
    <id>http://yoursite.com/2019/08/22/codingNow-3-从头到尾打印空格/</id>
    <published>2019-08-22T08:05:18.000Z</published>
    <updated>2019-08-23T08:32:53.172Z</updated>
    
    <content type="html"><![CDATA[<p>题目描述<br>输入一个链表，按链表从尾到头的顺序返回一个ArrayList。</p><p>方法一：利用堆栈，单个读取存入栈中，再逐个pop,实线从后往前。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) &#123;</span><br><span class="line">    Stack&lt;Integer&gt; <span class="built_in">stack</span> = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (listNode != null) &#123;</span><br><span class="line">        <span class="built_in">stack</span>.push(listNode.val);</span><br><span class="line">        listNode = listNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    ArrayList&lt;Integer&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">stack</span>.isEmpty()) &#123;</span><br><span class="line">        Integer pop = <span class="built_in">stack</span>.pop();</span><br><span class="line">        <span class="built_in">list</span>.add(pop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        或者利用arr的特性，在零位添加元素类似于对于堆栈进行push</span></span><br><span class="line"><span class="comment">//        while (listNode != null) &#123;</span></span><br><span class="line"><span class="comment">//            list.add(0, listNode.val);</span></span><br><span class="line"><span class="comment">//            listNode = listNode.next;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：递归，并利用list.add的类似堆栈特性。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    ArrayList&lt;Integer&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) &#123;</span><br><span class="line">        <span class="keyword">while</span> (listNode!=null)&#123;</span><br><span class="line">            <span class="built_in">list</span>.add(<span class="number">0</span>, listNode.val);</span><br><span class="line">            listNode = listNode.next;</span><br><span class="line">            printListFromTailToHead(listNode);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三：在递归的基础上利用了递归的特性，到尾反向执行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    ArrayList&lt;Integer&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) &#123;</span><br><span class="line">        <span class="keyword">if</span> (listNode!=null)&#123;</span><br><span class="line">            <span class="keyword">this</span>.printListFromTailToHead(listNode.next);</span><br><span class="line">            <span class="built_in">list</span>.add(listNode.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人总结，几个注意点<br>1.如果需要倒置或者反向一类的操作，利用stack可以完成，但是内存消耗较大，效率低。<br>2.list的add（0，xxx）可以做到stack的push操作。<br>3.递归的性质，重复执行，到尾反向传播。第三种方法中利用了递归积攒了大量的add操作未完成，直到最后listNode为空时，返回了空的list，开始完成之前积攒的嵌套add操作，同时也完成了反向的操作。（我怀疑出题者是写出了这个递归之后，才想出来的题目，哈哈，出题者有一点点炫技的嫌疑0.0）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目描述&lt;br&gt;输入一个链表，按链表从尾到头的顺序返回一个ArrayList。&lt;/p&gt;
&lt;p&gt;方法一：利用堆栈，单个读取存入栈中，再逐个pop,实线从后往前。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
    
      <category term="coding-interviews" scheme="http://yoursite.com/tags/coding-interviews/"/>
    
  </entry>
  
  <entry>
    <title>codingNow 2 替换空格</title>
    <link href="http://yoursite.com/2019/08/22/codingNow-2-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    <id>http://yoursite.com/2019/08/22/codingNow-2-替换空格/</id>
    <published>2019-08-22T06:19:00.000Z</published>
    <updated>2019-08-23T08:32:52.459Z</updated>
    
    <content type="html"><![CDATA[<p>题目描述<br>请实现一个函数，把字符串中的每个空格替换成”%20”，例如“We are happy.“，则输出”We%20are%20happy”</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test04</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> usedlength = str.length();</span><br><span class="line">        <span class="keyword">if</span> (str == null) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> whitespace = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; usedlength; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(i) == <span class="string">' '</span>) &#123;</span><br><span class="line">                whitespace++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> targetlength = whitespace * <span class="number">2</span> + usedlength;</span><br><span class="line">        str.setLength(targetlength);</span><br><span class="line"></span><br><span class="line">        targetlength--;</span><br><span class="line">        usedlength--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = usedlength ; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(i) != <span class="string">' '</span>) &#123;</span><br><span class="line">                str.setCharAt(targetlength , str.charAt(i));</span><br><span class="line">                targetlength--;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                str.setCharAt(targetlength , <span class="string">'0'</span>);</span><br><span class="line">                str.setCharAt(--targetlength, <span class="string">'2'</span>);</span><br><span class="line">                str.setCharAt(--targetlength, <span class="string">'%'</span>);</span><br><span class="line">                targetlength--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人总结，几个个注意点<br>1.–targetlength和targetlength– 的区别，此处应该是需要先减后setCharAt。<br>2.预先对targetlength和usedlength处理，可以避免后续的繁杂思考。<br>3.考虑从后往前，这样每个字符可以只移动一次，就可以到达目标位置，而且可以在原有字符串上操作，避免了开辟新的内存空间存储新的字符串。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目描述&lt;br&gt;请实现一个函数，把字符串中的每个空格替换成”%20”，例如“We are happy.“，则输出”We%20are%20happy”&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
    
      <category term="coding-interviews" scheme="http://yoursite.com/tags/coding-interviews/"/>
    
  </entry>
  
  <entry>
    <title>codingNow 1 二维数组的查找</title>
    <link href="http://yoursite.com/2019/08/21/codingNow-1-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
    <id>http://yoursite.com/2019/08/21/codingNow-1-二维数组的查找/</id>
    <published>2019-08-21T12:40:28.000Z</published>
    <updated>2019-08-23T08:32:51.870Z</updated>
    
    <content type="html"><![CDATA[<p>题目描述：<br>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。<br>请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p>规律：首先选取数组中右上角的数字。如果该数字等于要查找的数字，查找过程结束：<br>如果该数字大于要查找的数字，剔除这个数字所在的列：如果该数字小于要查找的数字，剔除这个数字所在的行。<br>也就是说如果要查找的数字不在数组的右上角，则每－次都在数组的查找范围中剔除）行或者一列，这样每一步都可以缩小<br>查找的范围，直到找到要查找的数字，或者查找范围为空。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> boolean <span class="title">find</span><span class="params">(<span class="keyword">int</span>[][] <span class="built_in">array</span>, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入条件判断</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">array</span> == null || <span class="built_in">array</span>.length &lt; <span class="number">1</span> || <span class="built_in">array</span>[<span class="number">0</span>].length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> rows = <span class="built_in">array</span>.length; <span class="comment">// 数组的行数</span></span><br><span class="line">        <span class="keyword">int</span> cols = <span class="built_in">array</span>[<span class="number">0</span>].length; <span class="comment">// 数组行的列数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> row = <span class="number">0</span>; <span class="comment">// 起始开始的行号</span></span><br><span class="line">        <span class="keyword">int</span> col = cols - <span class="number">1</span>; <span class="comment">// 起始开始的列号</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 要查找的位置确保在数组之内</span></span><br><span class="line">        <span class="keyword">while</span> (row &gt;= <span class="number">0</span> &amp;&amp; row &lt; rows &amp;&amp; col &gt;= <span class="number">0</span> &amp;&amp; col &lt; cols) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">array</span>[row][col] == target) &#123; <span class="comment">// 如果找到了就直接退出</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">array</span>[row][col] &gt; target) &#123; <span class="comment">// 如果找到的数比要找的数大，说明要找的数在当前数的左边</span></span><br><span class="line">                col--; <span class="comment">// 列数减一，代表向左移动</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果找到的数比要找的数小，说明要找的数在当前数的下边</span></span><br><span class="line">                row++; <span class="comment">// 行数加一，代表向下移动</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] <span class="built_in">array</span> = &#123;</span><br><span class="line">                &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">9</span>&#125;,</span><br><span class="line">                &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">12</span>&#125;,</span><br><span class="line">                &#123;<span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">13</span>&#125;,</span><br><span class="line">                &#123;<span class="number">6</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">15</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(find1(<span class="built_in">array</span>, <span class="number">7</span>));    <span class="comment">// 要查找的数在数组中</span></span><br><span class="line">        System.out.println(find1(<span class="built_in">array</span>, <span class="number">5</span>));    <span class="comment">// 要查找的数不在数组中</span></span><br><span class="line">        System.out.println(find1(<span class="built_in">array</span>, <span class="number">1</span>));    <span class="comment">// 要查找的数是数组中最小的数字</span></span><br><span class="line">        System.out.println(find1(<span class="built_in">array</span>, <span class="number">15</span>));   <span class="comment">// 要查找的数是数组中最大的数字</span></span><br><span class="line">        System.out.println(find1(<span class="built_in">array</span>, <span class="number">0</span>));    <span class="comment">// 要查找的数比数组中最小的数字还小</span></span><br><span class="line">        System.out.println(find1(<span class="built_in">array</span>, <span class="number">16</span>));   <span class="comment">// 要查找的数比数组中最大的数字还大</span></span><br><span class="line">        System.out.println(find1(null, <span class="number">16</span>));     <span class="comment">// 健壮性测试，输入空指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> boolean <span class="title">find1</span><span class="params">(<span class="keyword">int</span>[][] <span class="built_in">array</span>, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">array</span> == null || <span class="built_in">array</span>.length &lt; <span class="number">1</span> || <span class="built_in">array</span>[<span class="number">0</span>].length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a = <span class="built_in">array</span>.length;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="built_in">array</span>[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> y = b - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; a &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; b) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">array</span>[x][y] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">array</span>[x][y] &lt; target) &#123;</span><br><span class="line">                x++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                y--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目描述：&lt;br&gt;在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。&lt;br&gt;请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。&lt;/p&gt;
&lt;p&gt;规律：首先选取数组中右上角的数字。如果该数字等于要查找的数字，查找
      
    
    </summary>
    
    
      <category term="coding-interviews" scheme="http://yoursite.com/tags/coding-interviews/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 第 26 号问题：删除排序数组中的重复项</title>
    <link href="http://yoursite.com/2019/08/21/LeetCode%E7%AC%AC26%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
    <id>http://yoursite.com/2019/08/21/LeetCode第26号问题：删除排序数组中的重复项/</id>
    <published>2019-08-21T09:21:23.000Z</published>
    <updated>2019-08-21T05:52:15.238Z</updated>
    
    <content type="html"><![CDATA[<p>题目来源于 LeetCode 上第 26 号问题：删除排序数组中的重复项。题目难度为 Easy，目前通过率为 48.8% 。</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个排序数组，你需要在<strong>原地</strong>删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在<strong>原地修改输入数组</strong>并在使用 O(1) 额外空间的条件下完成。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定数组 nums = [1,1,2], </span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以<strong>“引用”</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</span><br><span class="line">int len = removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>使用快慢指针来记录遍历的坐标。</p><ul><li>开始时这两个指针都指向第一个数字</li><li>如果两个指针指的数字相同，则快指针向前走一步</li><li>如果不同，则两个指针都向前走一步</li><li>当快指针走完整个数组后，慢指针当前的坐标加1就是数组中不同数字的个数</li></ul><h3 id="动画描述"><a href="#动画描述" class="headerlink" title="动画描述"></a>动画描述</h3><p><img src="https://bucket-1257126549.cos.ap-guangzhou.myqcloud.com/20181116115601.gif" alt></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int removeDuplicates(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        if (nums.empty()) return 0;</span><br><span class="line">        int pre = 0, cur = 0, n = nums.size();</span><br><span class="line">        while (cur &lt; n) &#123;</span><br><span class="line">            if (nums[pre] == nums[cur])&#123;</span><br><span class="line">              cur++;  </span><br><span class="line">            &#125; else&#123;</span><br><span class="line">                ++pre;</span><br><span class="line">                nums[pre] = nums[cur];</span><br><span class="line">                cur++;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        return pre + 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://bucket-1257126549.cos.ap-guangzhou.myqcloud.com/blog/fz0rq.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目来源于 LeetCode 上第 26 号问题：删除排序数组中的重复项。题目难度为 Easy，目前通过率为 48.8% 。&lt;/p&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 第 21 号问题：合并两个有序链表</title>
    <link href="http://yoursite.com/2019/08/21/LeetCode%E7%AC%AC21%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/08/21/LeetCode第21号问题：合并两个有序链表/</id>
    <published>2019-08-21T07:52:31.000Z</published>
    <updated>2019-08-21T05:52:16.220Z</updated>
    
    <content type="html"><![CDATA[<p>题目来源于 LeetCode 上第 21 号问题：合并两个有序链表。题目难度为 Easy，目前通过率为 45.8% 。</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><h4 id="一般方案"><a href="#一般方案" class="headerlink" title="一般方案"></a>一般方案</h4><h5 id="1-1-解题思想"><a href="#1-1-解题思想" class="headerlink" title="1.1 解题思想"></a>1.1 解题思想</h5><blockquote><p>（1）对空链表存在的情况进行处理，假如 pHead1 为空则返回 pHead2 ，pHead2 为空则返回 pHead1。（两个都为空此情况在pHead1为空已经被拦截）<br>（2）在两个链表无空链表的情况下确定第一个结点，比较链表1和链表2的第一个结点的值，将值小的结点保存下来为合并后的第一个结点。并且把第一个结点为最小的链表向后移动一个元素。<br>（3）继续在剩下的元素中选择小的值，连接到第一个结点后面，并不断next将值小的结点连接到第一个结点后面，直到某一个链表为空。<br>（4）当两个链表长度不一致时，也就是比较完成后其中一个链表为空，此时需要把另外一个链表剩下的元素都连接到第一个结点的后面。</p></blockquote><h5 id="1-2-代码实现"><a href="#1-2-代码实现" class="headerlink" title="1.2 代码实现"></a>1.2 代码实现</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">mergeTwoOrderedLists</span><span class="params">(ListNode* pHead1, ListNode* pHead2)</span></span>&#123;</span><br><span class="line">    ListNode* pTail = <span class="literal">NULL</span>;<span class="comment">//指向新链表的最后一个结点 pTail-&gt;next去连接</span></span><br><span class="line">    ListNode* newHead = <span class="literal">NULL</span>;<span class="comment">//指向合并后链表第一个结点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pHead1)&#123;</span><br><span class="line">        <span class="keyword">return</span> pHead2;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="literal">NULL</span> == pHead2)&#123;</span><br><span class="line">        <span class="keyword">return</span> pHead1;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//确定头指针</span></span><br><span class="line">        <span class="keyword">if</span> ( pHead1-&gt;data &lt; pHead2-&gt;data)&#123;</span><br><span class="line">            newHead = pHead1;</span><br><span class="line">            pHead1 = pHead1-&gt;next;<span class="comment">//指向链表的第二个结点</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            newHead = pHead2;</span><br><span class="line">            pHead2 = pHead2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        pTail = newHead;<span class="comment">//指向第一个结点</span></span><br><span class="line">        <span class="keyword">while</span> ( pHead1 &amp;&amp; pHead2) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( pHead1-&gt;data &lt;= pHead2-&gt;data )&#123;</span><br><span class="line">                pTail-&gt;next = pHead1;  </span><br><span class="line">                pHead1 = pHead1-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                pTail-&gt;next = pHead2;</span><br><span class="line">                pHead2 = pHead2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            pTail = pTail-&gt;next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span> == pHead1)&#123;</span><br><span class="line">            pTail-&gt;next = pHead2;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="literal">NULL</span> == pHead2)&#123;</span><br><span class="line">            pTail-&gt;next = pHead1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-递归方案"><a href="#2-递归方案" class="headerlink" title="2 递归方案"></a>2 递归方案</h4><h5 id="2-1-解题思想"><a href="#2-1-解题思想" class="headerlink" title="2.1 解题思想"></a>2.1 解题思想</h5><blockquote><p>（1）对空链表存在的情况进行处理，假如 pHead1 为空则返回 pHead2 ，pHead2 为空则返回 pHead1。<br>（2）比较两个链表第一个结点的大小，确定头结点的位置<br>（3）头结点确定后，继续在剩下的结点中选出下一个结点去链接到第二步选出的结点后面，然后在继续重复（2 ）（3） 步，直到有链表为空。</p></blockquote><h5 id="2-2-代码实现"><a href="#2-2-代码实现" class="headerlink" title="2.2 代码实现"></a>2.2 代码实现</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">mergeTwoOrderedLists</span><span class="params">(ListNode* pHead1, ListNode* pHead2)</span></span>&#123;</span><br><span class="line">    ListNode* newHead = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pHead1)&#123;</span><br><span class="line">        <span class="keyword">return</span> pHead2;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="literal">NULL</span> ==pHead2)&#123;</span><br><span class="line">        <span class="keyword">return</span> pHead1;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pHead1-&gt;data &lt; pHead2-&gt;data)&#123;</span><br><span class="line">            newHead = pHead1;</span><br><span class="line">            newHead-&gt;next = mergeTwoOrderedLists(pHead1-&gt;next, pHead2);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            newHead = pHead2;</span><br><span class="line">            newHead-&gt;next = mergeTwoOrderedLists(pHead1, pHead2-&gt;next);</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>### </p><p><img src="https://bucket-1257126549.cos.ap-guangzhou.myqcloud.com/blog/fz0rq.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目来源于 LeetCode 上第 21 号问题：合并两个有序链表。题目难度为 Easy，目前通过率为 45.8% 。&lt;/p&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 第 20 号问题：有效的括号</title>
    <link href="http://yoursite.com/2019/08/21/LeetCode%E7%AC%AC20%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <id>http://yoursite.com/2019/08/21/LeetCode第20号问题：有效的括号/</id>
    <published>2019-08-21T06:51:19.000Z</published>
    <updated>2019-08-21T05:57:29.245Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;{&#39;</code>，<code>&#39;}&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p>注意空字符串可被认为是有效字符串。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;()&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;(]&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;([)]&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p><strong>示例 5:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;&#123;[]&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题让我们验证输入的字符串是否为括号字符串，包括大括号，中括号和小括号。</p><p>这里我们使用<strong>栈</strong>。</p><ul><li>遍历输入字符串</li><li>如果当前字符为左半边括号时，则将其压入栈中</li><li>如果遇到右半边括号时，<strong>分类讨论：</strong></li><li>1）如栈不为空且为对应的左半边括号，则取出栈顶元素，继续循环  </li><li>2）若此时栈为空，则直接返回false</li><li>3）若不为对应的左半边括号，反之返回false</li></ul><h3 id="动画描述"><a href="#动画描述" class="headerlink" title="动画描述"></a>动画描述</h3><p><img src="https://bucket-1257126549.cos.ap-guangzhou.myqcloud.com/20181108111124.gif" alt></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isValid(string s) &#123;</span><br><span class="line"></span><br><span class="line">        stack&lt;char&gt; stack;</span><br><span class="line">        for( int i = 0 ; i &lt; s.size() ; i ++ )</span><br><span class="line">            if( s[i] == &apos;(&apos; || s[i] == &apos;&#123;&apos; || s[i] == &apos;[&apos;)</span><br><span class="line">                stack.push(s[i]);</span><br><span class="line">            else&#123;</span><br><span class="line"></span><br><span class="line">                if( stack.size() == 0 )</span><br><span class="line">                    return false;</span><br><span class="line"></span><br><span class="line">                char c = stack.top();</span><br><span class="line">                stack.pop();</span><br><span class="line"></span><br><span class="line">                char match;</span><br><span class="line">                if( s[i] == &apos;)&apos; )&#123;</span><br><span class="line">                    match = &apos;(&apos;;</span><br><span class="line">                &#125;</span><br><span class="line">                else if( s[i] == &apos;]&apos; )&#123;</span><br><span class="line">                    match = &apos;[&apos;;</span><br><span class="line">                &#125;</span><br><span class="line">                else&#123;</span><br><span class="line">                    match = &apos;&#123;&apos;;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if(c != match)  return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        if( stack.size() != 0 )</span><br><span class="line">            return false;</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://bucket-1257126549.cos.ap-guangzhou.myqcloud.com/blog/fz0rq.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个只包括 &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt;，&lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;，&lt;cod
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 第 9 号问题：回文数</title>
    <link href="http://yoursite.com/2019/08/21/LeetCode%E7%AC%AC9%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%9B%9E%E6%96%87%E6%95%B0/"/>
    <id>http://yoursite.com/2019/08/21/LeetCode第9号问题：回文数/</id>
    <published>2019-08-21T05:50:51.000Z</published>
    <updated>2019-08-21T05:57:30.931Z</updated>
    
    <content type="html"><![CDATA[<p>题目来源于 LeetCode 第 9 号问题：回文数。题目难度为 Easy，目前通过率为 56.0%。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 121</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: -121</span><br><span class="line">输出: false</span><br><span class="line">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 10</span><br><span class="line">输出: false</span><br><span class="line">解释: 从右向左读, 为 01 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure><p><strong>进阶:</strong></p><p>你能不将整数转为字符串来解决这个问题吗？</p><h2 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h2><h3 id="解法一：普通解法"><a href="#解法一：普通解法" class="headerlink" title="解法一：普通解法"></a>解法一：普通解法</h3><p>最好理解的一种解法就是先将 <strong>整数转为字符串</strong> ，然后将字符串分割为数组，只需要循环数组的一半长度进行判断对应元素是否相等即可。</p><h4 id="动画描述"><a href="#动画描述" class="headerlink" title="动画描述"></a>动画描述</h4><p><img src="https://raw.githubusercontent.com/MisterBooo/myBlogPic/master/20190525181152.gif" alt></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///简单粗暴，看看就行</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        String reversedStr = (<span class="keyword">new</span> StringBuilder(x + <span class="string">""</span>)).reverse().toString();</span><br><span class="line">        <span class="keyword">return</span> (x + <span class="string">""</span>).equals(reversedStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解法二：进阶解法—数学解法"><a href="#解法二：进阶解法—数学解法" class="headerlink" title="解法二：进阶解法—数学解法"></a>解法二：进阶解法—数学解法</h3><p>通过取整和取余操作获取整数中对应的数字进行比较。</p><p>举个例子：1221 这个数字。</p><ul><li>通过计算 1221 / 1000， 得首位1</li><li>通过计算 1221 % 10， 可得末位 1</li><li>进行比较</li><li>再将 22 取出来继续比较</li></ul><h4 id="动画描述-1"><a href="#动画描述-1" class="headerlink" title="动画描述"></a>动画描述</h4><p><img src="https://raw.githubusercontent.com/MisterBooo/myBlogPic/master/20190525181202.gif" alt></p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//边界判断</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> div = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">while</span> (x / div &gt;= <span class="number">10</span>) div *= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> left = x / div;</span><br><span class="line">            <span class="keyword">int</span> right = x % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (left != right) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            x = (x % div) / <span class="number">10</span>;</span><br><span class="line">            div /= <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解法三：进阶解法—巧妙解法"><a href="#解法三：进阶解法—巧妙解法" class="headerlink" title="解法三：进阶解法—巧妙解法"></a>解法三：进阶解法—巧妙解法</h3><p>直观上来看待回文数的话，就感觉像是将数字进行对折后看能否一一对应。</p><p>所以这个解法的操作就是 <strong>取出后半段数字进行翻转</strong>。</p><p>这里需要注意的一个点就是由于回文数的位数可奇可偶，所以当它的长度是偶数时，它对折过来应该是相等的；当它的长度是奇数时，那么它对折过来后，有一个的长度需要去掉一位数（除以 10 并取整）。</p><p>具体做法如下：</p><ul><li>每次进行取余操作 （ %10），取出最低的数字：<code>y = x % 10</code></li><li>将最低的数字加到取出数的末尾：<code>revertNum = revertNum * 10 + y</code></li><li>每取一个最低位数字，x 都要自除以 10</li><li>判断 <code>x</code> 是不是小于 <code>revertNum</code> ，当它小于的时候，说明数字已经对半或者过半了</li><li>最后，判断奇偶数情况：如果是偶数的话，revertNum 和 x 相等；如果是奇数的话，最中间的数字就在revertNum 的最低位上，将它除以 10 以后应该和 x 相等。</li></ul><h4 id="动画描述-2"><a href="#动画描述-2" class="headerlink" title="动画描述"></a>动画描述</h4><p><img src="https://raw.githubusercontent.com/MisterBooo/myBlogPic/master/20190525181211.png" alt></p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//思考：这里大家可以思考一下，为什么末尾为 0 就可以直接返回 false</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> revertedNumber = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; revertedNumber) &#123;</span><br><span class="line">            revertedNumber = revertedNumber * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x == revertedNumber || x == revertedNumber / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目来源于 LeetCode 第 9 号问题：回文数。题目难度为 Easy，目前通过率为 56.0%。&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;判断一
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>浅析用枚举实现单例模式</title>
    <link href="http://yoursite.com/2019/08/21/%E6%B5%85%E6%9E%90%E7%94%A8%E6%9E%9A%E4%B8%BE%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/21/浅析用枚举实现单例模式/</id>
    <published>2019-08-21T05:22:30.000Z</published>
    <updated>2019-08-21T05:34:06.208Z</updated>
    
    <content type="html"><![CDATA[<p>1 引言<br>        相信如果能看到我这篇博客的小伙伴，肯定都看过Joshua Bloch大神说过的这句话：“单元素的枚举类型已经成为实现Singleton的最佳方法”。其实，第一次读到这句话，我连其中说的单元素指什么都不知道，尴尬。后来，网上看了搜索了好几篇文章，发现基本上都是转载自相同的一篇文章，而我的困惑是“为什么要用枚举类型实现单例模式呢”，文章中都说的很笼统，于是决定自己结合Joshua Bloch的《effective java》写一篇总结下，给后来的同学做个参考。</p><p>2 什么是单例模式<br>        关于什么是单例模式的定义，我之前的一篇文章（最简单的设计模式–单例模式）中有写过，主要是讲恶汉懒汉、线程安全方面得问题，我就不再重复了，只是做下单例模式的总结。之前文章中实现单例模式三个主要特点：1、构造方法私有化；2、实例化的变量引用私有化；3、获取实例的方法共有。</p><pre><code>如果不使用枚举，大家采用的一般都是“双重检查加锁”这种方式，如下，对单例模式还不了解的同学希望先大致看下这种思路，接下来的3.1和3.2都是针对这种实现方式进行探讨，了解过单例模式的同学可以跳过直接看3.1的内容：</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> 1 public class Singleton &#123;</span><br><span class="line"> 2     private volatile static Singleton uniqueInstance;</span><br><span class="line"> 3     private Singleton() &#123;&#125;</span><br><span class="line"> 4     public static Singleton getInstance() &#123;</span><br><span class="line"> 5         if (uniqueInstance == null) &#123;</span><br><span class="line"> 6             synchronized (Singleton.class)&#123;</span><br><span class="line"> 7                 if(uniqueInstance == null)&#123;//进入区域后，再检查一次，如果仍是null,才创建实例</span><br><span class="line"> 8                     uniqueInstance = new Singleton();</span><br><span class="line"> 9                 &#125;</span><br><span class="line">10             &#125;</span><br><span class="line">11         &#125;</span><br><span class="line">12         return uniqueInstance;</span><br><span class="line">13     &#125;</span><br><span class="line">14 &#125;</span><br></pre></td></tr></table></figure><p>3 为什么要用枚举单例<br>3.1 私有化构造器并不保险<br>        《effective java》中只简单的提了几句话：“享有特权的客户端可以借助AccessibleObject.setAccessible方法，通过反射机制调用私有构造器。如果需要低于这种攻击，可以修改构造器，让它在被要求创建第二个实例的时候抛出异常。”下面我以代码来演示一下，大家就能明白：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> 1  public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line"> 2         Singleton s=Singleton.getInstance();</span><br><span class="line"> 3         Singleton sUsual=Singleton.getInstance();</span><br><span class="line"> 4         Constructor&lt;Singleton&gt; constructor=Singleton.class.getDeclaredConstructor();</span><br><span class="line"> 5         constructor.setAccessible(true);</span><br><span class="line"> 6         Singleton sReflection=constructor.newInstance();</span><br><span class="line"> 7         System.out.println(s+&quot;\n&quot;+sUsual+&quot;\n&quot;+sReflection);</span><br><span class="line"> 8         System.out.println(&quot;正常情况下，实例化两个实例是否相同：&quot;+(s==sUsual));</span><br><span class="line"> 9         System.out.println(&quot;通过反射攻击单例模式情况下，实例化两个实例是否相同：&quot;+(s==sReflection));</span><br><span class="line">10     &#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><p>com.lxp.pattern.singleton.Singleton@1540e19d<br>com.lxp.pattern.singleton.Singleton@1540e19d<br>com.lxp.pattern.singleton.Singleton@677327b6<br>正常情况下，实例化两个实例是否相同：true<br>通过反射攻击单例模式情况下，实例化两个实例是否相同：false<br>既然存在反射可以攻击的问题，就需要按照Joshua Bloch做说的，加个异常处理。这里我就不演示了，等会讲到枚举我再演示。</p><p>3.2 序列化问题<br>大家先看下面这个代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> 1 public class SerSingleton implements Serializable &#123;</span><br><span class="line"> 2     private volatile static SerSingleton uniqueInstance;</span><br><span class="line"> 3     private  String content;</span><br><span class="line"> 4     public String getContent() &#123;</span><br><span class="line"> 5         return content;</span><br><span class="line"> 6     &#125;</span><br><span class="line"> 7 </span><br><span class="line"> 8     public void setContent(String content) &#123;</span><br><span class="line"> 9         this.content = content;</span><br><span class="line">10     &#125;</span><br><span class="line">11     private SerSingleton() &#123;</span><br><span class="line">12     &#125;</span><br><span class="line">13 </span><br><span class="line">14     public static SerSingleton getInstance() &#123;</span><br><span class="line">15         if (uniqueInstance == null) &#123;</span><br><span class="line">16             synchronized (SerSingleton.class) &#123;</span><br><span class="line">17                 if (uniqueInstance == null) &#123;</span><br><span class="line">18                     uniqueInstance = new SerSingleton();</span><br><span class="line">19                 &#125;</span><br><span class="line">20             &#125;</span><br><span class="line">21         &#125;</span><br><span class="line">22         return uniqueInstance;</span><br><span class="line">23     &#125;</span><br><span class="line">24 </span><br><span class="line">25     </span><br><span class="line">26     public static void main(String[] args) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">27         SerSingleton s = SerSingleton.getInstance();</span><br><span class="line">28         s.setContent(&quot;单例序列化&quot;);</span><br><span class="line">29         System.out.println(&quot;序列化前读取其中的内容：&quot;+s.getContent());</span><br><span class="line">30         ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;SerSingleton.obj&quot;));</span><br><span class="line">31         oos.writeObject(s);</span><br><span class="line">32         oos.flush();</span><br><span class="line">33         oos.close();</span><br><span class="line">34 </span><br><span class="line">35         FileInputStream fis = new FileInputStream(&quot;SerSingleton.obj&quot;);</span><br><span class="line">36         ObjectInputStream ois = new ObjectInputStream(fis);</span><br><span class="line">37         SerSingleton s1 = (SerSingleton)ois.readObject();</span><br><span class="line">38         ois.close();</span><br><span class="line">39         System.out.println(s+&quot;\n&quot;+s1);</span><br><span class="line">40         System.out.println(&quot;序列化后读取其中的内容：&quot;+s1.getContent());</span><br><span class="line">41         System.out.println(&quot;序列化前后两个是否同一个：&quot;+(s==s1));</span><br><span class="line">42     &#125;</span><br><span class="line">43     </span><br><span class="line">44 &#125;</span><br></pre></td></tr></table></figure><p>先猜猜看输出结果：</p><p>序列化前读取其中的内容：单例序列化<br>com.lxp.pattern.singleton.SerSingleton@135fbaa4<br>com.lxp.pattern.singleton.SerSingleton@58372a00<br>序列化后读取其中的内容：单例序列化<br>序列化前后两个是否同一个：false<br>        可以看出，序列化前后两个对象并不想等。为什么会出现这种问题呢？这个讲起来，又可以写一篇博客了，简单来说“任何一个readObject方法，不管是显式的还是默认的，它都会返回一个新建的实例，这个新建的实例不同于该类初始化时创建的实例。”当然，这个问题也是可以解决的，想详细了解的同学可以翻看《effective java》第77条：对于实例控制，枚举类型优于readResolve。</p><p>3.3 枚举类详解<br>3.3.1 枚举单例定义<br>咱们先来看一下枚举类型单例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public enum  EnumSingleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    public EnumSingleton getInstance()&#123;</span><br><span class="line">        return INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怎么样，是不是觉得好简单，只有这么点代码，其实也没这么简单啦，编译后相当于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 public final class  EnumSingleton extends Enum&lt; EnumSingleton&gt; &#123;</span><br><span class="line">2         public static final  EnumSingleton  ENUMSINGLETON;</span><br><span class="line">3         public static  EnumSingleton[] values();</span><br><span class="line">4         public static  EnumSingleton valueOf(String s);</span><br><span class="line">5         static &#123;&#125;;</span><br><span class="line">6 &#125;</span><br></pre></td></tr></table></figure><p>由反编译后的代码可知，DATASOURCE 被声明为 static 的，根据在【单例深思】饿汉式与类加载 中所描述的类加载过程，可以知道虚拟机会保证一个类的<clinit>() 方法在多线程环境中被正确的加锁、同步。所以，枚举实现是在实例化时是线程安全。</clinit></p><p>接下来看看序列化问题：</p><p>Java规范中规定，每一个枚举类型极其定义的枚举变量在JVM中都是唯一的，因此在枚举类型的序列化和反序列化上，Java做了特殊的规定。<br>在序列化的时候Java仅仅是将枚举对象的name属性输出到结果中，反序列化的时候则是通过 java.lang.Enum 的 valueOf() 方法来根据名字查找枚举对象。<br>也就是说，以下面枚举为例，序列化的时候只将 DATASOURCE 这个名称输出，反序列化的时候再通过这个名称，查找对于的枚举类型，因此反序列化后的实例也会和之前被序列化的对象实例相同。</p><p>public enum DataSourceEnum {<br>    DATASOURCE;<br>}  </p><p>由此可知，枚举天生保证序列化单例。</p><p>咱们先来验证下会不会避免上述的两个问题，先看下枚举单例的优点，然后再来讲原理。</p><p>3.3.2 避免反射攻击</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> 1 public enum  EnumSingleton &#123;</span><br><span class="line"> 2     INSTANCE;</span><br><span class="line"> 3     public EnumSingleton getInstance()&#123;</span><br><span class="line"> 4         return INSTANCE;</span><br><span class="line"> 5     &#125;</span><br><span class="line"> 6 </span><br><span class="line"> 7     public static void main(String[] args) throws IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException &#123;</span><br><span class="line"> 8         EnumSingleton singleton1=EnumSingleton.INSTANCE;</span><br><span class="line"> 9         EnumSingleton singleton2=EnumSingleton.INSTANCE;</span><br><span class="line">10         System.out.println(&quot;正常情况下，实例化两个实例是否相同：&quot;+(singleton1==singleton2));</span><br><span class="line">11         Constructor&lt;EnumSingleton&gt; constructor= null;</span><br><span class="line">12         constructor = EnumSingleton.class.getDeclaredConstructor();</span><br><span class="line">13         constructor.setAccessible(true);</span><br><span class="line">14         EnumSingleton singleton3= null;</span><br><span class="line">15         singleton3 = constructor.newInstance();</span><br><span class="line">16         System.out.println(singleton1+&quot;\n&quot;+singleton2+&quot;\n&quot;+singleton3);</span><br><span class="line">17         System.out.println(&quot;通过反射攻击单例模式情况下，实例化两个实例是否相同：&quot;+(singleton1==singleton3));</span><br><span class="line">18     &#125;</span><br><span class="line">19 &#125;</span><br></pre></td></tr></table></figure><p>结果就报异常了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> 1 Exception in thread &quot;main&quot; java.lang.NoSuchMethodException: com.lxp.pattern.singleton.EnumSingleton.&lt;init&gt;()</span><br><span class="line"> 2     at java.lang.Class.getConstructor0(Class.java:3082)</span><br><span class="line"> 3     at java.lang.Class.getDeclaredConstructor(Class.java:2178)</span><br><span class="line"> 4     at com.lxp.pattern.singleton.EnumSingleton.main(EnumSingleton.java:20)</span><br><span class="line"> 5     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line"> 6     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line"> 7     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line"> 8     at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line"> 9     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)</span><br><span class="line">10 正常情况下，实例化两个实例是否相同：true</span><br></pre></td></tr></table></figure><p>然后debug模式，可以发现是因为EnumSingleton.class.getDeclaredConstructors()获取所有构造器，会发现并没有我们所设置的无参构造器，只有一个参数为（String.class,int.class）构造器，然后看下Enum源码就明白，这两个参数是name和ordial两个属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> 1 public abstract class Enum&lt;E extends Enum&lt;E&gt;&gt;</span><br><span class="line"> 2             implements Comparable&lt;E&gt;, Serializable &#123;</span><br><span class="line"> 3         private final String name;</span><br><span class="line"> 4         public final String name() &#123;</span><br><span class="line"> 5             return name;</span><br><span class="line"> 6         &#125;</span><br><span class="line"> 7         private final int ordinal;</span><br><span class="line"> 8         public final int ordinal() &#123;</span><br><span class="line"> 9             return ordinal;</span><br><span class="line">10         &#125;</span><br><span class="line">11         protected Enum(String name, int ordinal) &#123;</span><br><span class="line">12             this.name = name;</span><br><span class="line">13             this.ordinal = ordinal;</span><br><span class="line">14         &#125;</span><br><span class="line">15         //余下省略</span><br></pre></td></tr></table></figure><pre><code>枚举Enum是个抽象类，其实一旦一个类声明为枚举，实际上就是继承了Enum，所以会有（String.class,int.class）的构造器。既然是可以获取到父类Enum的构造器，那你也许会说刚才我的反射是因为自身的类没有无参构造方法才导致的异常，并不能说单例枚举避免了反射攻击。好的，那我们就使用父类Enum的构造器，看看是什么情况:</code></pre><p>　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> 1 public enum  EnumSingleton &#123;</span><br><span class="line"> 2     INSTANCE;</span><br><span class="line"> 3     public EnumSingleton getInstance()&#123;</span><br><span class="line"> 4         return INSTANCE;</span><br><span class="line"> 5     &#125;</span><br><span class="line"> 6 </span><br><span class="line"> 7     public static void main(String[] args) throws IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException &#123;</span><br><span class="line"> 8         EnumSingleton singleton1=EnumSingleton.INSTANCE;</span><br><span class="line"> 9         EnumSingleton singleton2=EnumSingleton.INSTANCE;</span><br><span class="line">10         System.out.println(&quot;正常情况下，实例化两个实例是否相同：&quot;+(singleton1==singleton2));</span><br><span class="line">11         Constructor&lt;EnumSingleton&gt; constructor= null;</span><br><span class="line">12 //        constructor = EnumSingleton.class.getDeclaredConstructor();</span><br><span class="line">13         constructor = EnumSingleton.class.getDeclaredConstructor(String.class,int.class);//其父类的构造器</span><br><span class="line">14         constructor.setAccessible(true);</span><br><span class="line">15         EnumSingleton singleton3= null;</span><br><span class="line">16         //singleton3 = constructor.newInstance();</span><br><span class="line">17         singleton3 = constructor.newInstance(&quot;testInstance&quot;,66);</span><br><span class="line">18         System.out.println(singleton1+&quot;\n&quot;+singleton2+&quot;\n&quot;+singleton3);</span><br><span class="line">19         System.out.println(&quot;通过反射攻击单例模式情况下，实例化两个实例是否相同：&quot;+(singleton1==singleton3));</span><br><span class="line">20     &#125;</span><br><span class="line">21 &#125;</span><br></pre></td></tr></table></figure><p>然后咱们看运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">正常情况下，实例化两个实例是否相同：true</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: Cannot reflectively create enum objects</span><br><span class="line">    at java.lang.reflect.Constructor.newInstance(Constructor.java:417)</span><br><span class="line">    at com.lxp.pattern.singleton.EnumSingleton.main(EnumSingleton.java:25)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">    at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)</span><br></pre></td></tr></table></figure><pre><code>继续报异常。之前是因为没有无参构造器，这次拿到了父类的构造器了，只是在执行第17行(我没有复制import等包，所以行号少于我自己运行的代码)时候抛出异常，说是不能够反射，我们看下Constructor类的newInstance方法源码：</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> 1 @CallerSensitive</span><br><span class="line"> 2     public T newInstance(Object ... initargs)</span><br><span class="line"> 3         throws InstantiationException, IllegalAccessException,</span><br><span class="line"> 4                IllegalArgumentException, InvocationTargetException</span><br><span class="line"> 5     &#123;</span><br><span class="line"> 6         if (!override) &#123;</span><br><span class="line"> 7             if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class="line"> 8                 Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line"> 9                 checkAccess(caller, clazz, null, modifiers);</span><br><span class="line">10             &#125;</span><br><span class="line">11         &#125;</span><br><span class="line">12         if ((clazz.getModifiers() &amp; Modifier.ENUM) != 0)</span><br><span class="line">13             throw new IllegalArgumentException(&quot;Cannot reflectively create enum objects&quot;);</span><br><span class="line">14         ConstructorAccessor ca = constructorAccessor;   // read volatile</span><br><span class="line">15         if (ca == null) &#123;</span><br><span class="line">16             ca = acquireConstructorAccessor();</span><br><span class="line">17         &#125;</span><br><span class="line">18         @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">19         T inst = (T) ca.newInstance(initargs);</span><br><span class="line">20         return inst;</span><br><span class="line">21     &#125;</span><br></pre></td></tr></table></figure><p>请看黄颜色标注的第12行源码，说明反射在通过newInstance创建对象时，会检查该类是否ENUM修饰，如果是则抛出异常，反射失败。</p><p>3.3.3 避免序列化问题<br> 我按照3.2中方式来写，作为对比，方面大家看的更清晰些：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> 1 public enum  SerEnumSingleton implements Serializable &#123;</span><br><span class="line"> 2     INSTANCE;</span><br><span class="line"> 3     private  String content;</span><br><span class="line"> 4     public String getContent() &#123;</span><br><span class="line"> 5         return content;</span><br><span class="line"> 6     &#125;</span><br><span class="line"> 7     public void setContent(String content) &#123;</span><br><span class="line"> 8         this.content = content;</span><br><span class="line"> 9     &#125;</span><br><span class="line">10     private SerEnumSingleton() &#123;</span><br><span class="line">11     &#125;</span><br><span class="line">12 </span><br><span class="line">13     public static void main(String[] args) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">14         SerEnumSingleton s = SerEnumSingleton.INSTANCE;</span><br><span class="line">15         s.setContent(&quot;枚举单例序列化&quot;);</span><br><span class="line">16         System.out.println(&quot;枚举序列化前读取其中的内容：&quot;+s.getContent());</span><br><span class="line">17         ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;SerEnumSingleton.obj&quot;));</span><br><span class="line">18         oos.writeObject(s);</span><br><span class="line">19         oos.flush();</span><br><span class="line">20         oos.close();</span><br><span class="line">21 </span><br><span class="line">22         FileInputStream fis = new FileInputStream(&quot;SerEnumSingleton.obj&quot;);</span><br><span class="line">23         ObjectInputStream ois = new ObjectInputStream(fis);</span><br><span class="line">24         SerEnumSingleton s1 = (SerEnumSingleton)ois.readObject();</span><br><span class="line">25         ois.close();</span><br><span class="line">26         System.out.println(s+&quot;\n&quot;+s1);</span><br><span class="line">27         System.out.println(&quot;枚举序列化后读取其中的内容：&quot;+s1.getContent());</span><br><span class="line">28         System.out.println(&quot;枚举序列化前后两个是否同一个：&quot;+(s==s1));</span><br><span class="line">29     &#125;</span><br><span class="line">30 &#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p>1 枚举序列化前读取其中的内容：枚举单例序列化<br>2 INSTANCE<br>3 INSTANCE<br>4 枚举序列化后读取其中的内容：枚举单例序列化<br>5 枚举序列化前后两个是否同一个：true<br>        枚举类是JDK1.5才出现的，那之前的程序员面对反射攻击和序列化问题是怎么解决的呢？其实就是像Enum源码那样解决的，只是现在可以用enum可以使我们代码量变的极其简洁了。至此，相信同学们应该能明白了为什么Joshua Bloch说的“单元素的枚举类型已经成为实现Singleton的最佳方法”了吧，也算解决了我自己的困惑。既然能解决这些问题，还能使代码量变的极其简洁，那我们就有理由选枚举单例模式了。对了，解决序列化问题，要先懂transient和readObject，鉴于我的主要目的不在于此，就不在此写这两个原理了。</p><p>参考：<br>1、《Effective Java》（第2版）：p14-15，p271-274</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1 引言&lt;br&gt;        相信如果能看到我这篇博客的小伙伴，肯定都看过Joshua Bloch大神说过的这句话：“单元素的枚举类型已经成为实现Singleton的最佳方法”。其实，第一次读到这句话，我连其中说的单元素指什么都不知道，尴尬。后来，网上看了搜索了好几篇文章
      
    
    </summary>
    
    
      <category term="浅析java" scheme="http://yoursite.com/tags/%E6%B5%85%E6%9E%90java/"/>
    
  </entry>
  
  <entry>
    <title>控制反转（IoC）和依赖注入（DI）的区别</title>
    <link href="http://yoursite.com/2019/08/18/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%EF%BC%88IoC%EF%BC%89%E5%92%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%EF%BC%88DI%EF%BC%89%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/08/18/控制反转（IoC）和依赖注入（DI）的区别/</id>
    <published>2019-08-18T01:22:42.000Z</published>
    <updated>2019-08-21T05:24:35.287Z</updated>
    
    <content type="html"><![CDATA[<p>IOC   inversion of control  控制反转</p><p>DI   Dependency Injection  依赖注入</p><p>要理解这两个概念，首先要搞清楚以下几个问题：</p><p>参与者都有谁？<br>依赖：谁依赖于谁？为什么需要依赖？<br>注入：谁注入于谁？到底注入什么？<br>控制反转：谁控制谁？控制什么？为何叫反转（有反转就应该有正转了）？<br>依赖注入和控制反转是同一概念吗？<br>        下面就来简要的回答一下上述问题，把这些问题搞明白了，IoC/DI也就明白了。<br>（1）参与者都有谁：</p><pre><code>一般有三方参与者，一个是某个对象；一个是IoC/DI的容器；另一个是某个对象的外部资源。又要名词解释一下，某个对象指的就是任意的、普通的Java对象; IoC/DI的容器简单点说就是指用来实现IoC/DI功能的一个框架程序；对象的外部资源指的就是对象需要的，但是是从对象外部获取的，都统称资源，比如：对象需要的其它对象、或者是对象需要的文件资源等等。</code></pre><p>（2）谁依赖于谁：</p><pre><code>当然是某个对象依赖于IoC/DI的容器</code></pre><p>（3）为什么需要依赖：</p><pre><code>对象需要IoC/DI的容器来提供对象需要的外部资源</code></pre><p>（4）谁注入于谁：</p><pre><code>很明显是IoC/DI的容器 注入 某个对象</code></pre><p>（5）到底注入什么：</p><pre><code>就是注入某个对象所需要的外部资源</code></pre><p>（6）谁控制谁：</p><pre><code>当然是IoC/DI的容器来控制对象了</code></pre><p>（7）控制什么：</p><pre><code>主要是控制对象实例的创建</code></pre><p>（8）为何叫反转：</p><pre><code>反转是相对于正向而言的，那么什么算是正向的呢？考虑一下常规情况下的应用程序，如果要在A里面使用C，你会怎么做呢？当然是直接去创建C的对象，也就是说，是在A类中主动去获取所需要的外部资源C，这种情况被称为正向的。那么什么是反向呢？就是A类不再主动去获取C，而是被动等待，等待IoC/DI的容器获取一个C的实例，然后反向的注入到A类中。</code></pre><p>用图例来说明一下，先看没有IoC/DI的时候，常规的A类使用C类的示意图，如图7所示：</p><p><img src="http://dl.iteye.com/upload/attachment/265411/6fe19539-32ce-3a62-bc20-f8dc1e819f82.gif" alt><br>                                      常规A使用C示意图</p><p>当有了IoC/DI的容器后，A类不再主动去创建C了，如图8所示：</p><p><img src="http://dl.iteye.com/upload/attachment/265413/e29bb428-b9f0-3465-8601-671c3fa68b8c.gif" alt><br>                                      A类不再主动创建C</p><p>而是被动等待，等待IoC/DI的容器获取一个C的实例，然后反向的注入到A类中，如图9所示：</p><p><img src="http://dl.iteye.com/upload/attachment/265415/2a537021-45c9-3fd3-80c5-18b9ace2b27a.gif" alt><br>                                      有IoC/DI容器后程序结构示意图</p><p>（9）依赖注入和控制反转是同一概念吗？</p><pre><code>根据上面的讲述，应该能看出来，依赖注入和控制反转是对同一件事情的不同描述，从某个方面讲，就是它们描述的角度不同。依赖注入是从应用程序的角度在描述，可以把依赖注入描述完整点：应用程序依赖容器创建并注入它所需要的外部资源；而控制反转是从容器的角度在描述，描述完整点：容器控制应用程序，由容器反向的向应用程序注入应用程序所需要的外部资源。</code></pre><p>（10）小结一下：</p><pre><code>其实IoC/DI对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC/DI容器来创建并注入它所需要的资源了。这么小小的一个改变其实是编程思想的一个大进步，这样就有效的分离了对象和它所需要的外部资源，使得它们松散耦合，有利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活</code></pre><p>（11）接下演示一下依赖注入机制的过程</p><p>代码2<br>待注入的业务对象Content.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.zj.ioc.di.ctor;</span><br><span class="line">import com.zj.ioc.di.Content;</span><br><span class="line"> </span><br><span class="line">public class MyBusiness &#123;</span><br><span class="line">    private Content myContent;</span><br><span class="line"> </span><br><span class="line">    public MyBusiness(Content content) &#123;</span><br><span class="line">       myContent = content;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    public void doBusiness()&#123;</span><br><span class="line">       myContent.BusniessContent();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    public void doAnotherBusiness()&#123;</span><br><span class="line">       myContent.AnotherBusniessContent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyBusniess类展示了一个业务组件，它的实现需要对象Content的注入。代码3，代码4，代码5，6分别演示构造子注入（Constructor Injection），设值注入（Setter Injection）和接口注入（Interface Injection）三种方式。</p><p>代码3<br>构造子注入（Constructor Injection）MyBusiness.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.zj.ioc.di.ctor;</span><br><span class="line">import com.zj.ioc.di.Content;</span><br><span class="line"> </span><br><span class="line">public class MyBusiness &#123;</span><br><span class="line">    private Content myContent;</span><br><span class="line"> </span><br><span class="line">    public MyBusiness(Content content) &#123;</span><br><span class="line">       myContent = content;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    public void doBusiness()&#123;</span><br><span class="line">       myContent.BusniessContent();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    public void doAnotherBusiness()&#123;</span><br><span class="line">       myContent.AnotherBusniessContent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码4<br>设值注入（Setter Injection） MyBusiness.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package com.zj.ioc.di.iface;</span><br><span class="line">import com.zj.ioc.di.Content;</span><br><span class="line"> </span><br><span class="line">public interface InContent &#123;</span><br><span class="line">    void createContent(Content content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码5<br>   设置注入接口InContent.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package com.zj.ioc.di.iface;</span><br><span class="line">import com.zj.ioc.di.Content;</span><br><span class="line"> </span><br><span class="line">public interface InContent &#123;</span><br><span class="line">    void createContent(Content content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>代码6接口注入（Interface Injection）MyBusiness.java</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.zj.ioc.di.iface;</span><br><span class="line">import com.zj.ioc.di.Content;</span><br><span class="line"> </span><br><span class="line">public class MyBusiness implements InContent&#123;</span><br><span class="line">    private Content myContent;</span><br><span class="line"> </span><br><span class="line">    public void createContent(Content content) &#123;</span><br><span class="line">       myContent = content;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    public void doBusniess()&#123;</span><br><span class="line">       myContent.BusniessContent();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    public void doAnotherBusniess()&#123;</span><br><span class="line">       myContent.AnotherBusniessContent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IOC   inversion of control  控制反转&lt;/p&gt;
&lt;p&gt;DI   Dependency Injection  依赖注入&lt;/p&gt;
&lt;p&gt;要理解这两个概念，首先要搞清楚以下几个问题：&lt;/p&gt;
&lt;p&gt;参与者都有谁？&lt;br&gt;依赖：谁依赖于谁？为什么需要依赖？
      
    
    </summary>
    
    
      <category term="浅析java" scheme="http://yoursite.com/tags/%E6%B5%85%E6%9E%90java/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 第 3 号问题：无重复字符的最长子串</title>
    <link href="http://yoursite.com/2019/07/28/LeetCode%E7%AC%AC3%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
    <id>http://yoursite.com/2019/07/28/LeetCode第3号问题：无重复字符的最长子串/</id>
    <published>2019-07-28T07:57:48.000Z</published>
    <updated>2019-08-21T05:57:30.102Z</updated>
    
    <content type="html"><![CDATA[<p>题目来源于 LeetCode 上第 3 号问题：无重复字符的最长子串。题目难度为 Medium，目前通过率为 29.0% 。</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p><strong>示例 1:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="string">"abcabcbb"</span></span><br><span class="line">输出: <span class="number">3</span> </span><br><span class="line">解释: 因为无重复字符的最长子串是 <span class="string">"abc"</span>，所以其长度为 <span class="number">3</span>。</span><br></pre></td></tr></table></figure><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>建立一个256位大小的整型数组 freg ，用来建立字符和其出现位置之间的映射。</p><p>维护一个滑动窗口，窗口内的都是没有重复的字符，去尽可能的扩大窗口的大小，窗口不停的向右滑动。</p><ul><li>（1）如果当前遍历到的字符从未出现过，那么直接扩大右边界；</li><li>（2）如果当前遍历到的字符出现过，则缩小窗口（左边索引向右移动），然后继续观察当前遍历到的字符；</li><li>（3）重复（1）（2），直到左边索引无法再移动；</li><li>（4）维护一个结果res，每次用出现过的窗口大小来更新结果 res，最后返回 res 获取结果。</li></ul><h3 id="动画描述"><a href="#动画描述" class="headerlink" title="动画描述"></a>动画描述</h3><p><img src="https://bucket-1257126549.cos.ap-guangzhou.myqcloud.com/blog/o2acw.gif" alt="动画描述"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><figcaption><span>1,暴力法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滑动窗口</span></span><br><span class="line"><span class="comment">// 时间复杂度: O(len(s))</span></span><br><span class="line"><span class="comment">// 空间复杂度: O(len(charset))</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> longgest =<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span> ; j &lt;=s.length() ; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(isUnique(s,i,j))&#123;</span><br><span class="line">                        longgest = Math.max(longgest, j-i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> longgest;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isUnique</span><span class="params">(String s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">            HashSet&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;Character&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end ; i++) &#123;</span><br><span class="line">                <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">                <span class="keyword">if</span> (set.contains(c)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                set.add(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目来源于 LeetCode 上第 3 号问题：无重复字符的最长子串。题目难度为 Medium，目前通过率为 29.0% 。&lt;/p&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 第 2 号问题：两数相加</title>
    <link href="http://yoursite.com/2019/07/28/LeetCode%E7%AC%AC2%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>http://yoursite.com/2019/07/28/LeetCode第2号问题：两数相加/</id>
    <published>2019-07-28T04:32:41.000Z</published>
    <updated>2019-08-21T05:36:27.472Z</updated>
    
    <content type="html"><![CDATA[<p>题目来源于 LeetCode 上第 2 号问题：两数相加。题目难度为 Medium，目前通过率为 33.9% 。</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给出两个 <strong>非空</strong> 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 <strong>逆序</strong> 的方式存储的，并且它们的每个节点只能存储 <strong>一位</strong> 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出：7 -&gt; 0 -&gt; 8</span><br><span class="line">原因：342 + 465 = 807</span><br></pre></td></tr></table></figure><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>设立一个表示进位的变量<code>carried</code>，建立一个新链表，把输入的两个链表从头往后同时处理，每两个相加，将结果加上<code>carried</code>后的值作为一个新节点到新链表后面。</p><h3 id="动画描述"><a href="#动画描述" class="headerlink" title="动画描述"></a>动画描述</h3><p><img src="https://bucket-1257126549.cos.ap-guangzhou.myqcloud.com/20181117122234.gif" alt="动画描述"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/// 时间复杂度: O(n)</span><br><span class="line">/// 空间复杂度: O(n)</span><br><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) &#123;</span><br><span class="line"></span><br><span class="line">        ListNode *p1 = l1, *p2 = l2;</span><br><span class="line">        ListNode *dummyHead = new ListNode(-1);</span><br><span class="line">        ListNode* cur = dummyHead;</span><br><span class="line">        int carried = 0;</span><br><span class="line">        while(p1 || p2 )&#123;</span><br><span class="line">            int a = p1 ? p1-&gt;val : 0;</span><br><span class="line">            int b = p2 ? p2-&gt;val : 0;</span><br><span class="line">            cur-&gt;next = new ListNode((a + b + carried) % 10);</span><br><span class="line">            carried = (a + b + carried) / 10;</span><br><span class="line"></span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            p1 = p1 ? p1-&gt;next : NULL;</span><br><span class="line">            p2 = p2 ? p2-&gt;next : NULL;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cur-&gt;next = carried ? new ListNode(1) : NULL;</span><br><span class="line">        ListNode* ret = dummyHead-&gt;next;</span><br><span class="line">        delete dummyHead;</span><br><span class="line">        return ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目来源于 LeetCode 上第 2 号问题：两数相加。题目难度为 Medium，目前通过率为 33.9% 。&lt;/p&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 第 1 号问题：两数之和</title>
    <link href="http://yoursite.com/2019/07/27/LeetCode%E7%AC%AC1%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://yoursite.com/2019/07/27/LeetCode第1号问题：两数之和/</id>
    <published>2019-07-27T07:57:48.000Z</published>
    <updated>2019-08-21T05:23:01.431Z</updated>
    
    <content type="html"><![CDATA[<p>题目来源于 LeetCode 上第 1 号问题：两数之和。题目难度为 Easy，目前通过率为 45.8% 。</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那 <strong>两个</strong> 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>使用查找表来解决该问题。</p><p>设置一个 map 容器 record 用来记录元素的值与索引，然后遍历数组 nums。</p><ul><li>每次遍历时使用临时变量 complement 用来保存目标值与当前值的差值</li><li>在此次遍历中查找 record ，查看是否有与 complement 一致的值，如果查找成功则返回查找值的索引值与当前变量的值 i</li><li>如果未找到，则在 record 保存该元素与索引值 i</li></ul><h3 id="动画描述"><a href="#动画描述" class="headerlink" title="动画描述"></a>动画描述</h3><p><img src="https://bucket-1257126549.cos.ap-guangzhou.myqcloud.com/20181028221055.gif" alt="动画描述"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 1. Two Sum</span><br><span class="line">// https://leetcode.com/problems/two-sum/description/</span><br><span class="line">// 时间复杂度：O(n)</span><br><span class="line">// 空间复杂度：O(n)</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        unordered_map&lt;int,int&gt; record;</span><br><span class="line">        for(int i = 0 ; i &lt; nums.size() ; i ++)&#123;</span><br><span class="line">       </span><br><span class="line">            int complement = target - nums[i];</span><br><span class="line">            if(record.find(complement) != record.end())&#123;</span><br><span class="line">                int res[] = &#123;i, record[complement]&#125;;</span><br><span class="line">                return vector&lt;int&gt;(res, res + 2);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            record[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目来源于 LeetCode 上第 1 号问题：两数之和。题目难度为 Easy，目前通过率为 45.8% 。&lt;/p&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
</feed>
